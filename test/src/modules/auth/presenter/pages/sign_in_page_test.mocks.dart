// Mocks generated by Mockito 5.4.4 from annotations
// in project_list_fliutter/test/src/modules/auth/presenter/pages/sign_in_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mobx/mobx.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:project_list_fliutter/src/modules/auth/domain/usecases/login_use_case.dart'
    as _i2;
import 'package:project_list_fliutter/src/modules/auth/infra/comm_packages/proto/user.pb.dart'
    as _i6;
import 'package:project_list_fliutter/src/modules/auth/presenter/stores/sign_in_store.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoginUseCase_0 extends _i1.SmartFake implements _i2.LoginUseCase {
  _FakeLoginUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_1 extends _i1.SmartFake
    implements _i3.ReactiveContext {
  _FakeReactiveContext_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FormStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormStore extends _i1.Mock implements _i4.FormStore {
  MockFormStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginUseCase get loginUseCase => (super.noSuchMethod(
        Invocation.getter(#loginUseCase),
        returnValue: _FakeLoginUseCase_0(
          this,
          Invocation.getter(#loginUseCase),
        ),
      ) as _i2.LoginUseCase);

  @override
  String get username => (super.noSuchMethod(
        Invocation.getter(#username),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#username),
        ),
      ) as String);

  @override
  set username(String? _username) => super.noSuchMethod(
        Invocation.setter(
          #username,
          _username,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get password => (super.noSuchMethod(
        Invocation.getter(#password),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#password),
        ),
      ) as String);

  @override
  set password(String? _password) => super.noSuchMethod(
        Invocation.setter(
          #password,
          _password,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  set isLoading(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLogged => (super.noSuchMethod(
        Invocation.getter(#isLogged),
        returnValue: false,
      ) as bool);

  @override
  set isLogged(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLogged,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get navigatePage => (super.noSuchMethod(
        Invocation.getter(#navigatePage),
        returnValue: false,
      ) as bool);

  @override
  set navigatePage(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #navigatePage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set loggedUser(_i6.User? value) => super.noSuchMethod(
        Invocation.setter(
          #loggedUser,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isValid => (super.noSuchMethod(
        Invocation.getter(#isValid),
        returnValue: false,
      ) as bool);

  @override
  _i3.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.ReactiveContext);

  @override
  void linkToPage() => super.noSuchMethod(
        Invocation.method(
          #linkToPage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setUsername(String? value) => super.noSuchMethod(
        Invocation.method(
          #setUsername,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPassword(String? value) => super.noSuchMethod(
        Invocation.method(
          #setPassword,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearErrorMessage() => super.noSuchMethod(
        Invocation.method(
          #clearErrorMessage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> doLogin() => (super.noSuchMethod(
        Invocation.method(
          #doLogin,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
