// Mocks generated by Mockito 5.4.4 from annotations
// in project_list_fliutter/test/src/modules/task/unit/external/datasource/http/post_task_datasource_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i6;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:project_list_fliutter/src/modules/task/domain/errors/error_datasource.dart'
    as _i5;
import 'package:project_list_fliutter/src/modules/task/external/datasources/http/post_add_tasks_datasources.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostAddTasksDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostAddTasksDatasource extends _i1.Mock
    implements _i3.PostAddTasksDatasource {
  MockPostAddTasksDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  _i4.Future<(bool?, _i5.CreateTaskError?)> saveTask(
          _i6.Uint8List? taskEncoded) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTask,
          [taskEncoded],
        ),
        returnValue:
            _i4.Future<(bool?, _i5.CreateTaskError?)>.value((null, null)),
      ) as _i4.Future<(bool?, _i5.CreateTaskError?)>);
}
